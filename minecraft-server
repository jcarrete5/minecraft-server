#!/bin/bash

set -eo pipefail

subcommand="$1"
session_name="$2"
minecraft_dir='/srv/minecraft'
server_root="$minecraft_dir/$session_name"
[ "$(whoami)" != "minecraft" ] && sudo_cmd="sudo -u minecraft"

session_exists() {
    # Returns zero if the session_name exists
    $sudo_cmd screen -S "$session_name" -Q 'select' . > /dev/null
}

game_command() {
    # Assumes the session exists
    $sudo_cmd screen -S "$session_name" -X stuff "$(printf "%s\r" "$*")"
}

start_server() {
    if session_exists; then
        echo "$session_name already exists. Stop the running session before starting another." >&2
    else
        echo -n "Starting $session_name minecraft server..."
        $sudo_cmd screen -dmS "$session_name" /bin/bash -c "cd ${server_root}; java -Dfml.readTimeout=${fml_read_timeout:-120} -Xmx${jvm_max:-3G} -XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -XX:G1NewSizePercent=30 -XX:G1MaxNewSizePercent=40 -XX:G1HeapRegionSize=8M -XX:G1ReservePercent=20 -XX:G1HeapWastePercent=5 -XX:G1MixedGCCountTarget=4 -XX:InitiatingHeapOccupancyPercent=15 -XX:G1MixedGCLiveThresholdPercent=90 -XX:G1RSetUpdatingPauseTimePercent=5 -XX:SurvivorRatio=32 -XX:+PerfDisableSharedMem -XX:MaxTenuringThreshold=1 -Dusing.aikars.flags=https://mcflags.emc.gs -Daikars.new.flags=true -jar minecraft_server.jar nogui"
        echo " Done"
    fi
}

stop_server() {
    if session_exists; then
        echo -n "Stopping server..."
        game_command stop
        echo " Done"
    else
        echo "Session doesn't exist" >&2
    fi
}

open_console() {
    if session_exists; then
        $sudo_cmd screen -S "$session_name" -rx
    else
        echo "Session doesn't exist" >&2
    fi
}

backup() {
    KEEP_BACKUPS=48
    BACKUP_DEST=backups
    mkdir -p $BACKUP_DEST
    cur_date="$(date +%y-%m-%d_%H-%M-%S)"

    game_command save-off
    game_command save-all
    echo "Backing up..." >&2

    # Wait a bit for the files to save
    sleep 3
    sync && wait

    set +e
    tar czf "backups/${cur_date}.tar.gz" world/ --totals
    set -e
    echo "Back up complete" >&2
    game_command save-on

    # Check for old backups
    backup_count="$(ls -1q | wc -l)"
    if [[ $(( backup_count - KEEP_BACKUPS )) -gt 0 ]]; then
        for old_backup in $(for f in "${BACKUP_DEST}"/[0-9-]*; do echo "${f}"; done | head -n"$(( backup_count - KEEP_BACKUPS ))"); do
            ${SUDO_CMD} rm "${old_backup}";
        done
        echo -e "Done ($(( backup_count - KEEP_BACKUPS )) backup(s) pruned)"
    else
        echo -e "Done (no backups pruned)"
    fi
}

usage() {
    cat <<-EOF
Minecraft server management script for servers in $minecraft_dir

Usage: minecraft-server (start [-M JVM_XMX] [-R FML_READ_TIMEOUT] | stop | console | backup) SESSION_NAME
    start                Start the server
    stop                 Stop the server
    console              Enter the server console through a screen session
    backup               Create a backup of the world

SESSION_NAME is the name of a minecraft server listed in $minecraft_dir
EOF
}

case "$subcommand" in
    start)
        OPTIND=2
        jvm_max="3G"
        fml_read_timeout="120"
        while getopts "M:R:" opt; do
            case "$opt" in
            M)
                jvm_max="$OPTARG"
                ;;
            R)
                fml_read_timeout="$OPTARG"
                ;;
            esac
        done
        shift $((OPTIND-1))
        [ "${1:-}" = "--" ] && shift
        session_name="$1"
        server_root="$minecraft_dir/$session_name"
        cd "$server_root"
        start_server
    ;;
    stop)
        cd "$server_root"
        stop_server
    ;;
    console)
        cd "$server_root"
        open_console
    ;;
    backup)
        cd "$server_root"
        backup
    ;;
    -h|--help)
        usage
        exit 0
    ;;
    *)
        usage
        exit 1
    ;;
esac

